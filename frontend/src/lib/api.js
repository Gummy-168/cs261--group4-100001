// Pretend-backend: replace with your real endpoints.

const API_BASE = import.meta.env.VITE_API_BASE_URL ?? "http://localhost:8080/api";

const mockHome = {
  hero: {
    images: [
      { id: "festival", src: "/hero/festival.jpg", href: "/events/festival-lights", alt: "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô" },
      { id: "sports", src: "/hero/sports-day.jpg", href: "/events/sports-day", alt: "‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏ü‡∏£‡∏ä‡∏ä‡∏µ‡πà" },
      { id: "concert", src: "/hero/concert.jpg", href: "/events/concert-night", alt: "‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á" },
    ],
    fallbackSrc: "/hero/fallback.jpg",
    headline: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏´‡∏•‡πà‡∏á‡∏£‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    tagline: "‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡πà‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
    period: "‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 13 ‚Äì 26 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
  },
  events: [
    {
      id: "camping",
      title: "‡∏Ñ‡πà‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á 4 ‡∏ß‡∏±‡∏ô 3 ‡∏Ñ‡∏∑‡∏ô ‡∏ì ‡πÄ‡∏Ç‡∏≤‡∏Ñ‡πâ‡∏≠",
      host: "‡∏ä‡∏°‡∏£‡∏°‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
      date: "2025-10-14",
      location: "‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡∏≤‡∏Ñ‡πâ‡∏≠",
      coverUrl: "/covers/camping.jpg",
      liked: true,
      category: "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡πà‡∏ô",
      type: "‡∏≠‡∏≤‡∏™‡∏≤",
      unit: "‡∏ä‡∏°‡∏£‡∏°",
    },
    {
      id: "scholar",
      title: "‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
      host: "‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
      date: "2025-10-19",
      location: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ñ‡∏ì‡∏∞‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
      coverUrl: "/covers/scholar.jpg",
      liked: false,
      category: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà",
      type: "‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£",
      unit: "‡∏Ñ‡∏ì‡∏∞‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    },
    {
      id: "python",
      title: "‡∏≠‡∏ö‡∏£‡∏° Python ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡∏õ‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á",
      host: "‡∏ä‡∏°‡∏£‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
      date: "2025-10-24",
      location: "Co-Working Space ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏ß‡∏° SC",
      coverUrl: "/covers/python.jpg",
      liked: false,
      category: "‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
      type: "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô",
      unit: "‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    },
  ],
  favoriteEvents: [
    {
      id: "camping",
      title: "‡∏Ñ‡πà‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á 4 ‡∏ß‡∏±‡∏ô 3 ‡∏Ñ‡∏∑‡∏ô ‡∏ì ‡πÄ‡∏Ç‡∏≤‡∏Ñ‡πâ‡∏≠",
      host: "‡∏ä‡∏°‡∏£‡∏°‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
      date: "2025-10-14",
      location: "‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡∏≤‡∏Ñ‡πâ‡∏≠",
      coverUrl: "/covers/camping.jpg",
      liked: true,
      category: "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡πà‡∏ô",
      type: "‡∏≠‡∏≤‡∏™‡∏≤",
      unit: "‡∏ä‡∏°‡∏£‡∏°",
    },
  ],
  agendaDays: [
    {
      date: "2025-10-14",
      highlight: true,
      items: [
        { title: "‡πÄ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", id: "a1" },
        { title: "‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå", id: "a2" },
      ],
    },
    {
      date: "2025-10-15",
      items: [
        { title: "‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤‡∏™‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", id: "b1" },
        { title: "‡∏ä‡∏°‡∏£‡∏°‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡πÅ‡∏à‡πä‡∏™‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô", id: "b2" },
      ],
    },
    {
      date: "2025-10-16",
      items: [
        { title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ö‡∏≥‡πÄ‡∏û‡πá‡∏ç‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏ì ‡∏ß‡∏±‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á", id: "c1" },
        { title: "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏¢‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•", id: "c2" },
      ],
    },
    {
      date: "2025-10-18",
      highlight: true,
      items: [
        { title: "‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏ß‡∏î‡∏ß‡∏á‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", id: "d1" },
        { title: "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏û‡∏ö‡∏®‡∏¥‡∏©‡∏¢‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", id: "d2" },
      ],
    },
    {
      date: "2025-10-19",
      items: [
        { title: "‡∏Ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", id: "e1" },
      ],
    },
  ],
  notifications: [
    {
      id: "n1",
      icon: "üéâ",
      color: "#9db8ff",
      title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° Thammasat 2025",
      detail: "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 12 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î!",
      unread: true,
    },
    {
      id: "n2",
      icon: "üóìÔ∏è",
      color: "#ffd166",
      title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏ö‡∏£‡∏° Python ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
      detail: "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å 2 ‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏ö‡∏£‡∏° Python ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡∏õ‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏£‡∏µ‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ô‡∏∞!",
      unread: true,
    },
    {
      id: "n3",
      icon: "üì¢",
      color: "#66a68c",
      title: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö: ‡∏õ‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏Æ‡∏°",
      detail: "‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏´‡∏ô‡πâ‡∏≤ Home ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
      unread: false,
    },
  ],
};

function buildHeaders(token) {
  const headers = { "Content-Type": "application/json" };
  if (token) headers.Authorization = `Bearer ${token}`;
  return headers;
}

export async function fetchHomeData(token) {
  try {
    const response = await fetch(`${API_BASE}/home`, {
      method: "GET",
      headers: buildHeaders(token),
      credentials: "include",
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch home data: ${response.status}`);
    }

    const data = await response.json();
    return {
      hero: data.hero ?? mockHome.hero,
      events: data.events ?? [],
      favoriteEvents: data.favoriteEvents ?? [],
      agendaDays: data.agendaDays ?? [],
      notifications: data.notifications ?? [],
    };
  } catch (error) {
    console.warn("[fetchHomeData] Falling back to mock data", error);
    return mockHome;
  }
}

export async function updateFavoriteEvent(eventId, liked, token) {
  const endpoint = `${API_BASE}/favorites/${eventId}`;
  const method = liked ? "POST" : "DELETE";

  try {
    const response = await fetch(endpoint, {
      method,
      headers: buildHeaders(token),
      credentials: "include",
      body: liked ? JSON.stringify({ eventId }) : undefined,
    });

    if (!response.ok) {
      throw new Error(`Failed to update favorite (${response.status})`);
    }
    return { ok: true };
  } catch (error) {
    console.error("[updateFavoriteEvent] error", error);
    return { ok: false, error };
  }
}

export async function fetchAllEvents() {
  return []; // fill in
}

export async function signInMock() {
  // return tokens, profile, etc.
  return { ok: true, user: { name: "Demo User" } };
}
