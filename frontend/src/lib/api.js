import { getAllEventCards, getEventCardsForUser } from '../services/eventService';
import { toggleFavorite as toggleFavoriteService, getFavoritesByUser } from '../services/favoriteService';

const API_BASE = import.meta.env.VITE_API_BASE_URL ?? "http://localhost:8080/api";

// Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hero ‡πÅ‡∏•‡∏∞ Agenda (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ API)
const mockHome = {
  hero: {
    images: [
      { id: "festival", src: "/hero/festival.jpg", href: "/events/festival-lights", alt: "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô" },
      { id: "sports", src: "/hero/sports-day.jpg", href: "/events/sports-day", alt: "‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏ü‡∏£‡∏ä‡∏ä‡∏µ‡πà" },
      { id: "concert", src: "/hero/concert.jpg", href: "/events/concert-night", alt: "‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á" },
    ],
    fallbackSrc: "/hero/fallback.jpg",
    headline: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏´‡∏•‡πà‡∏á‡∏£‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    tagline: "‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡πà‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ",
    period: "‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 13 ‚Äì 26 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
  },
  agendaDays: [
    {
      date: "2025-10-14",
      highlight: true,
      items: [
        { title: "‡πÄ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", id: "a1" },
        { title: "‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå", id: "a2" },
      ],
    },
    {
      date: "2025-10-15",
      items: [
        { title: "‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤‡∏™‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", id: "b1" },
        { title: "‡∏ä‡∏°‡∏£‡∏°‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡πÅ‡∏à‡πä‡∏™‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô", id: "b2" },
      ],
    },
  ],
  notifications: [
    {
      id: "n1",
      icon: "üéâ",
      color: "#9db8ff",
      title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° Thammasat 2025",
      detail: "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 12 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î!",
      unread: true,
    },
    {
      id: "n2",
      icon: "üóìÔ∏è",
      color: "#ffd166",
      title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏ö‡∏£‡∏° Python ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
      detail: "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å 2 ‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏ö‡∏£‡∏° Python ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡∏õ‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏£‡∏µ‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ô‡∏∞!",
      unread: true,
    },
  ],
};

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Backend ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà Frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
 */
function transformEventToFrontend(event) {
  return {
    id: event.id,
    title: event.title,
    host: event.organizer || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î',
    date: event.startTime,
    location: event.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
    coverUrl: event.imageUrl ? `${API_BASE.replace('/api', '')}${event.imageUrl}` : null,
    liked: event.isFavorited || false,
    category: event.category || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    type: event.category || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    unit: event.organizer || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    description: event.description,
    startTime: event.startTime,
    endTime: event.endTime,
    maxCapacity: event.maxCapacity,
    currentParticipants: event.currentParticipants,
    status: event.status,
    fee: event.fee,
    isFull: event.isFull,
    availableSeats: event.availableSeats,
  };
}

function buildHeaders(token) {
  const headers = { "Content-Type": "application/json" };
  if (token) headers.Authorization = `Bearer ${token}`;
  return headers;
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ Home (Events + Favorites + Hero + Agenda)
 * @param {string} token - Auth token (optional)
 * @param {number} userId - User ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ favorites (optional)
 */
export async function fetchHomeData(token, userId = null) {
  try {
    let events = [];
    let favoriteEvents = [];

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Events
    if (userId) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ userId ‡∏î‡∏∂‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° favorite status
      const eventsData = await getEventCardsForUser(userId);
      events = eventsData.map(transformEventToFrontend);
      
      // ‡∏Å‡∏£‡∏≠‡∏á events ‡∏ó‡∏µ‡πà favorite
      favoriteEvents = events.filter(e => e.liked);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ userId ‡∏î‡∏∂‡∏á‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      const eventsData = await getAllEventCards();
      events = eventsData.map(transformEventToFrontend);
    }

    return {
      hero: mockHome.hero,
      events: events,
      favoriteEvents: favoriteEvents,
      agendaDays: mockHome.agendaDays,
      notifications: mockHome.notifications,
    };
  } catch (error) {
    console.error("[fetchHomeData] Error:", error);
    // ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ return mock data
    return {
      hero: mockHome.hero,
      events: [],
      favoriteEvents: [],
      agendaDays: mockHome.agendaDays,
      notifications: mockHome.notifications,
    };
  }
}

/**
 * Toggle Favorite Event
 * @param {number} eventId - ID ‡∏Ç‡∏≠‡∏á event
 * @param {boolean} liked - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà (true = favorite, false = unfavorite)
 * @param {string} token - Auth token
 * @param {number} userId - User ID
 */
export async function updateFavoriteEvent(eventId, liked, token, userId) {
  if (!userId) {
    console.error("[updateFavoriteEvent] userId is required");
    return { ok: false, error: "User ID is required" };
  }

  try {
    await toggleFavoriteService(userId, eventId, !liked); // !liked ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ current state ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
    return { ok: true };
  } catch (error) {
    console.error("[updateFavoriteEvent] error", error);
    return { ok: false, error };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Events ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export async function fetchAllEvents() {
  try {
    const events = await getAllEventCards();
    return events.map(transformEventToFrontend);
  } catch (error) {
    console.error("[fetchAllEvents] Error:", error);
    return [];
  }
}

/**
 * Sign in mock (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ authService.js)
 */
export async function signInMock() {
  return { ok: true, user: { name: "Demo User" } };
}
